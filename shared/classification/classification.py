from typing import Dict, Optional, Union, Tuple, List
from shared.db_utils import save_log
import pandas as pd
import joblib
import os

# Bazowa ≈õcie≈ºka do katalogu z modelami
BASE_MODEL_PATH = '/app/shared/classification/models/'

# +--------------------------------------------------+
# |      MAPOWANIE TEKSTOWE DLA KLASYFIAKTOR√ìW       |
# |                   S≈Çowniki                       |
# +--------------------------------------------------+

# Dane autobusowe - s≈Çowniki
IS_LATE_MAPPING = {
    0: "na czas",
    1: "sp√≥≈∫niony"
}

DELAY_CATEGORY_MAPPING = {
    0: "na czas",
    1: "lekko sp√≥≈∫niony",
    2: "bardzo sp√≥≈∫niony"
}

# Dane rowerowe - s≈Çowniki
BIKE_BINARY_MAPPING = {
    0: "standardowo",
    1: "ma≈Ço"
}

BIKE_MULTICLASS_MAPPING = {
    0: "brak",
    1: "ma≈Ça dostƒôpno≈õƒá",
    2: "standardowa dostƒôpno≈õƒá",
    3: "wysoka dostƒôpno≈õƒá"
}

# +--------------------------------------------------+
# |    PRZYGOTOWANIE DANYCH I ZARZƒÑDZANIE MODELAM    |
# |            Funkcja do zarzƒÖdzania                |
# +--------------------------------------------------+

# Bazowa klasa dla predyktor√≥w modeli, obs≈ÇugujƒÖca ≈Çadowanie i status.
class BasePredictor:
    def __init__(self, model_type: str, data_source: str, model_name: str):
        self.model_type = model_type 
        self.data_source = data_source
        self.raw_model_name = model_name
        self.model_path = os.path.join(BASE_MODEL_PATH, model_name)
        self.new_model_path = self.model_path.replace('.pkl', '_new.pkl')

        self.model = None
        self.scaler = None
        self.label_encoder = None
        self.feature_names = None
        self.is_loaded = False
        self.load_status_message = "Model nie zosta≈Ç jeszcze za≈Çadowany."

        # Przy inicjalizacji, je≈õli istnieje "_new" plik, zastƒÖp nim g≈Ç√≥wny
        if os.path.exists(self.new_model_path):
            log_identifier = f"{self.data_source}_{self.model_type}_predictor"
            save_log(log_identifier, "info", f"Znaleziono nowy model {self.new_model_path} przy starcie. Przenoszƒô go na g≈Ç√≥wnƒÖ ≈õcie≈ºkƒô.")
            print(f"Znaleziono nowy model {self.new_model_path} przy starcie. Przenoszƒô go na g≈Ç√≥wnƒÖ ≈õcie≈ºkƒô.")
            try:
                if os.path.exists(self.model_path):
                    os.remove(self.model_path) # Usu≈Ñ stary model, je≈õli istnieje
                    save_log(log_identifier, "info", f"Usuniƒôto stary plik modelu: {self.model_path}")
                    print(f"Usuniƒôto stary plik modelu: {self.model_path}")
                os.rename(self.new_model_path, self.model_path) # Przemianuj nowy na g≈Ç√≥wny
                save_log(log_identifier, "info", f"Zmieniono nazwƒô {self.new_model_path} na {self.model_path}.")
                print(f"Zmieniono nazwƒô {self.new_model_path} na {self.model_path}.")
            except Exception as e:
                save_log(log_identifier, "error", f"B≈ÇƒÖd przy przenoszeniu {self.new_model_path} na {self.model_path} podczas startu: {e}")
                print(f"B≈ÇƒÖd przy przenoszeniu {self.new_model_path} na {self.model_path} podczas startu: {e}")
        
        self.load_model()

    # Wczytuje zapisany model i wszystkie komponenty (model, scaler, feature_names).
    def load_model(self) -> bool:

        try:
            if not os.path.exists(self.model_path):
                self.load_status_message = f"‚ö†Ô∏è Model nie istnieje: {self.model_path}"
                print(self.load_status_message)
                self.is_loaded = False
                return False
                
            print(f"üîÑ ≈Åadowanie modelu z: {self.model_path}")
            model_data = joblib.load(self.model_path)
            
            self.model = model_data.get('model')
            self.scaler = model_data.get('scaler')
            self.label_encoder = model_data.get('label_encoder')
            self.feature_names = model_data.get('feature_names')
            
            if self.model is None or self.scaler is None or self.feature_names is None:
                self.load_status_message = f"‚ùå B≈ÇƒÖd: Brak kluczowych komponent√≥w (model, scaler, feature_names) w pliku {self.model_path}"
                print(self.load_status_message)
                self.is_loaded = False
                return False

            self.is_loaded = True
            self.load_status_message = f"‚úÖ Model '{self.raw_model_name}' za≈Çadowany pomy≈õlnie!"
            save_log("class_module", "info", "Model klasyfikacji zosta≈Ç za≈Çadowany pomy≈õlnie")
            print(self.load_status_message)
            return True
            
        except Exception as e:
            self.load_status_message = f"‚ùå B≈ÇƒÖd ≈Çadowania modelu '{self.raw_model_name}': {e}"
            save_log("class_module", "erro", f"WystƒÖpi≈Ç b≈ÇƒÖd przy ≈Çadowaniu modelu klasyfikacji: {e}.")
            print(self.load_status_message)
            self.is_loaded = False
            return False

    # Zwraca status modelu
    def get_status(self) -> Dict:
        return {
            'loaded': self.is_loaded,
            'model_path': self.model_path,
            'raw_model_name': self.raw_model_name,
            'model_type': self.model_type,
            'data_source': self.data_source,
            'status_message': self.load_status_message,
            'feature_names_count': len(self.feature_names) if self.feature_names else 0
        }

    # Prze≈Çadowuje model z dysku
    def reload_model(self) -> bool:
        log_identifier = f"{self.data_source}_{self.model_type}_predictor"
        save_log(log_identifier, "info", f"üîÑ Rozpoczynam prze≈Çadowywanie modelu '{self.raw_model_name}'...")
        print(f"üîÑ Prze≈Çadowywanie modelu '{self.raw_model_name}'...")
        
        # Sprawd≈∫, czy nowy plik modelu istnieje
        if not os.path.exists(self.new_model_path):
            save_log(log_identifier, "warning", f"Brak nowego pliku modelu do prze≈Çadowania: {self.new_model_path}")
            print(f"‚ö†Ô∏è Brak nowego pliku modelu do prze≈Çadowania: {self.new_model_path}")
            return False

        try:
            # 1. Usu≈Ñ stary plik modelu (je≈õli istnieje), aby zrobiƒá miejsce na nowy
            if os.path.exists(self.model_path):
                os.remove(self.model_path)
                save_log(log_identifier, "info", f"Usuniƒôto stary plik modelu: {self.model_path}")
                print(f"Usuniƒôto stary plik modelu: {self.model_path}")
            
            # 2. Zmie≈Ñ nazwƒô nowego pliku na "g≈Ç√≥wny" plik modelu
            # Ta operacja jest atomowa na wiƒôkszo≈õci system√≥w plik√≥w.
            os.rename(self.new_model_path, self.model_path)
            save_log(log_identifier, "info", f"Zmieniono nazwƒô {self.new_model_path} na {self.model_path}.")
            print(f"Zmieniono nazwƒô {self.new_model_path} na {self.model_path}.")
            
            # 3. Za≈Çaduj nowo podmieniony model
            if self.load_model():
                save_log(log_identifier, "info", f"Model '{self.raw_model_name}' pomy≈õlnie prze≈Çadowany.")
                print(f"‚úÖ Model '{self.raw_model_name}' pomy≈õlnie prze≈Çadowany.")
                return True
            else:
                # Je≈õli ≈Çadowanie siƒô nie powiod≈Ço po podmianie, to jest problem
                save_log(log_identifier, "error", f"Nie uda≈Ço siƒô za≈Çadowaƒá nowo podmienionego modelu '{self.raw_model_name}'.")
                print(f"‚ùå Nie uda≈Ço siƒô za≈Çadowaƒá nowo podmienionego modelu '{self.raw_model_name}'.")
                return False
                
        except Exception as e:
            save_log(log_identifier, "error", f"B≈ÇƒÖd podczas atomowej podmiany modelu '{self.raw_model_name}': {e}")
            print(f"‚ùå B≈ÇƒÖd podczas atomowej podmiany modelu '{self.raw_model_name}': {e}")
            self.is_loaded = False # Upewnij siƒô, ≈ºe flaga jest False w przypadku b≈Çƒôdu
            return False

    # Wewnƒôtrzna metoda do przygotowywania cech z dict'a.
    def _prepare_features(self, data_dict: Dict, feature_mapping: Dict) -> Optional[pd.DataFrame]:
        if not self.is_loaded:
            print(f"‚ö†Ô∏è Model '{self.raw_model_name}' nie jest za≈Çadowany. Nie mo≈ºna przygotowaƒá cech.")
            return None

        feature_data = {}
        missing_keys = []

        for model_key, dict_key in feature_mapping.items():
            if dict_key in data_dict:
                feature_data[model_key] = data_dict[dict_key]
            else:
                missing_keys.append(dict_key)
        
        if missing_keys:
            print(f"‚ö†Ô∏è Brakuje kluczy w danych dla modelu '{self.raw_model_name}': {missing_keys}")
            return None

        try:
            df = pd.DataFrame([feature_data])

            # Obs≈Çuga 'daylight' je≈õli istnieje i jest w formatcie 'yes'/'no'
            if 'daylight' in df.columns and df['daylight'].dtype == 'object':
                if 'daylight' in self.feature_names: # Sprawd≈∫ czy model oczekuje 'daylight' jako numeryczne
                    df['daylight'] = df['daylight'].map({'yes': 1, 'no': 0}).fillna(0) # U≈ºyj 0 jako fallback
                    if df['daylight'].isnull().any():
                        print(f"‚ö†Ô∏è Nieznana warto≈õƒá 'daylight' dla modelu '{self.raw_model_name}'. U≈ºyto 0.")

            # Obs≈Çuga 'weather_condition' je≈õli istnieje i jest enkodowana
            if 'weather_condition' in df.columns and 'weather_condition_encoded' in self.feature_names:
                if self.label_encoder:
                    original_weather = df['weather_condition'].iloc[0]
                    try:
                        df['weather_condition_encoded'] = self.label_encoder.transform(df['weather_condition'])
                    except ValueError:
                        print(f"‚ö†Ô∏è Nieznana warto≈õƒá weather_condition: '{original_weather}' dla modelu '{self.raw_model_name}'")
                        known_classes = list(self.label_encoder.classes_)
                        if 'unknown' in known_classes:
                            print(f"üîÑ Mapujƒô '{original_weather}' -> 'unknown'")
                            df['weather_condition'] = 'unknown'
                            df['weather_condition_encoded'] = self.label_encoder.transform(df['weather_condition'])
                        elif known_classes: # Fallback do pierwszej znanej klasy
                            fallback_weather = known_classes[0]
                            print(f"üîÑ Brak klasy 'unknown'. U≈ºywam fallback: '{fallback_weather}'")
                            df['weather_condition'] = fallback_weather
                            df['weather_condition_encoded'] = self.label_encoder.transform(df['weather_condition'])
                        else:
                            print(f"‚ùå Brak znanych klas dla 'weather_condition' w modelu '{self.raw_model_name}'. Nie mo≈ºna zakodowaƒá.")
                            return None
                    df = df.drop('weather_condition', axis=1)
                else:
                    print(f"‚ö†Ô∏è Brak LabelEncoder dla 'weather_condition' w modelu '{self.raw_model_name}'. Pomijam enkodowanie.")
                    # Je≈õli model oczekuje 'weather_condition_encoded' ale nie ma encodera, to jest problem
                    if 'weather_condition_encoded' in self.feature_names:
                        print(f"‚ùå Model '{self.raw_model_name}' oczekuje 'weather_condition_encoded' ale brak LabelEncoder. Predykcja niemo≈ºliwa.")
                        return None
                    else: # Je≈õli model nie oczekuje zakodowanego, to po prostu usu≈Ñ oryginalnƒÖ kolumnƒô
                        df = df.drop('weather_condition', axis=1)
            elif 'weather_condition' in df.columns: # Je≈õli weather_condition istnieje, ale model nie oczekuje encoded
                 df = df.drop('weather_condition', axis=1) # Usu≈Ñ, je≈õli nie jest potrzebna

            # Upewnij siƒô, ≈ºe DataFrame ma te same kolumny i w tej samej kolejno≈õci co podczas treningu oraz dostosuj je do tamtego uk≈Çadu
            processed_df = pd.DataFrame(columns=self.feature_names)
            for col in self.feature_names:
                if col in df.columns:
                    processed_df[col] = df[col]
                else:
                    processed_df[col] = 0
            
            processed_df = df.reindex(columns=self.feature_names, fill_value=0)

            if processed_df.isnull().any().any():
                print(f"‚ö†Ô∏è Dane po przygotowaniu dla modelu '{self.raw_model_name}' zawierajƒÖ warto≈õci NaN.")
                return None
            save_log("class_module", "info", "Dane zosta≈Çy przygotowane dla modelu klasyfikacji.")
            return processed_df
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd przygotowywania cech dla modelu '{self.raw_model_name}': {e}")
            return None

# +--------------------------------------------------+
# |         PRZYGOTOWANIE DANYCH AUTOBUSOWYCH        |
# |             Funkcje do zarzƒÖdzania               |
# +--------------------------------------------------+

"""
Klasa odpowiedzialna za predykcjƒô r√≥≈ºnych aspekt√≥w dotyczƒÖcych autobus√≥w.
Wykorzystuje wytrenowane modele klasyfikacji (binarnej, wieloklasowej)
lub regresji do przewidywania op√≥≈∫nie≈Ñ autobus√≥w na podstawie wielu cech.

Klasteryzowane cechy:
- Dane o op√≥≈∫nieniach i punktualno≈õci: 'stops_count', 'maximum_delay_seconds',
    'minimum_delay_seconds', 'delay_variance_value', 'delay_standard_deviation',
    'delay_range_seconds', 'stops_on_time_count', 'stops_arrived_early_count',
    'stops_arrived_late_count', 'delay_consistency_score', 'on_time_stop_ratio',
    'avg_positive_delay_seconds', 'avg_negative_delay_seconds'.
    Te cechy opisujƒÖ z≈Ço≈ºono≈õƒá trasy oraz historyczne i bie≈ºƒÖce wska≈∫niki op√≥≈∫nie≈Ñ,
    pozwalajƒÖc modelowi zrozumieƒá charakterystykƒô ruchu autobusowego.
- Dane pogodowe: 'temperature', 'feelslike', 'humidity', 'wind_kph',
    'precip_mm', 'cloud', 'visibility_km', 'uv_index', 'daylight', 'weather_condition'.
    Warunki pogodowe sƒÖ kluczowymi czynnikami wp≈ÇywajƒÖcymi na ruch drogowy i punktualno≈õƒá
    transportu publicznego, stƒÖd ich uwzglƒôdnienie pozwala na bardziej precyzyjne predykcje.
- Dane o jako≈õci powietrza: 'fine_particles_pm2_5', 'coarse_particles_pm10',
    'carbon_monoxide_ppb', 'nitrogen_dioxide_ppb', 'ozone_ppb', 'sulfur_dioxide_ppb'.
    Zanieczyszczenie powietrza mo≈ºe po≈õrednio wp≈Çywaƒá na warunki drogowe lub decyzje
    operacyjne, co czyni je wa≈ºnym kontekstowym elementem predykcji.
- 'cluster_id': Identyfikator klastra, do kt√≥rego nale≈ºy dany punkt danych,
    pochodzƒÖcy z wcze≈õniej przeprowadzonej klasteryzacji. Daje to modelowi
    dodatkowƒÖ informacjƒô kontekstowƒÖ o typowym zachowaniu danej "grupy" autobus√≥w/tras.

Celem jest przewidywanie op√≥≈∫nie≈Ñ autobus√≥w (binarnie: na czas/sp√≥≈∫niony; wieloklasowo:
na czas/nieznaczne op√≥≈∫nienie/du≈ºe op√≥≈∫nienie; regresja: przewidywana warto≈õƒá op√≥≈∫nienia)
w oparciu o kompleksowy zestaw danych.
"""

class BusModelPredictor(BasePredictor):

    def __init__(self, model_type: str, model_name: str):
        super().__init__(model_type, 'bus', model_name)
        # Mapowanie cech dla danych autobusowych
        self.feature_mapping = {
            'stops_count': 'stops_count',
            'maximum_delay_seconds': 'maximum_delay_seconds',
            'minimum_delay_seconds': 'minimum_delay_seconds',
            'delay_variance_value': 'delay_variance_value',
            'delay_standard_deviation': 'delay_standard_deviation',
            'delay_range_seconds': 'delay_range_seconds',
            'stops_on_time_count': 'stops_on_time_count',
            'stops_arrived_early_count': 'stops_arrived_early_count',
            'stops_arrived_late_count': 'stops_arrived_late_count',
            'delay_consistency_score': 'delay_consistency_score',
            'on_time_stop_ratio': 'on_time_stop_ratio',
            'avg_positive_delay_seconds': 'avg_positive_delay_seconds',
            'avg_negative_delay_seconds': 'avg_negative_delay_seconds',
            'temperature': 'temperature',
            'feelslike': 'feelslike',
            'humidity': 'humidity',
            'wind_kph': 'wind_kph',
            'precip_mm': 'precip_mm',
            'cloud': 'cloud',
            'visibility_km': 'visibility_km',
            'uv_index': 'uv_index',
            'daylight': 'daylight',
            'weather_condition': 'weather_condition',
            'fine_particles_pm2_5': 'fine_particles_pm2_5',
            'coarse_particles_pm10': 'coarse_particles_pm10',
            'carbon_monoxide_ppb': 'carbon_monoxide_ppb',
            'nitrogen_dioxide_ppb': 'nitrogen_dioxide_ppb',
            'ozone_ppb': 'ozone_ppb',
            'sulfur_dioxide_ppb': 'sulfur_dioxide_ppb',
            'cluster_id': 'cluster_id'
        }

    # Wykonuje predykcjƒô na podstawie s≈Çownika danych wej≈õciowych.
    # Zwraca przewidywanƒÖ warto≈õƒá/klasƒô lub (klasƒô numerycznƒÖ, prawdopodobie≈Ñstwa, klasƒô tekstowƒÖ) dla klasyfikacji.
    def predict(self, data_dict: Dict) -> Optional[Union[float, Tuple[int, List[float], str]]]:
        if not self.is_loaded:
            print(f"‚ö†Ô∏è Model '{self.raw_model_name}' nie jest za≈Çadowany. Nie mo≈ºna wykonaƒá predykcji.")
            return None
        
        # Przygotuj cechy
        features_df = self._prepare_features(data_dict, self.feature_mapping)
        
        if features_df is None:
            print(f"‚ö†Ô∏è Nie mo≈ºna przygotowaƒá cech dla modelu '{self.raw_model_name}'.")
            return None
        
        try:
            # Normalizacja danych
            data_scaled = self.scaler.transform(features_df)
            
            # Predykcja
            if self.model_type == 'binary':
                prediction_num = self.model.predict(data_scaled)[0]
                probabilities = self.model.predict_proba(data_scaled)[0].tolist()
                prediction_label = IS_LATE_MAPPING.get(prediction_num, "nieznany_status")
                return int(prediction_num), probabilities, prediction_label
            elif self.model_type == 'multiclass':
                prediction_num = self.model.predict(data_scaled)[0]
                probabilities = self.model.predict_proba(data_scaled)[0].tolist()
                prediction_label = DELAY_CATEGORY_MAPPING.get(prediction_num, "nieznana_kategoria")
                return int(prediction_num), probabilities, prediction_label
            elif self.model_type == 'regression':
                prediction = self.model.predict(data_scaled)[0]
                return float(prediction)
            else:
                print(f"‚ùå Nieznany typ modelu: {self.model_type}")
                return None
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd predykcji dla modelu '{self.raw_model_name}': {e}")
            return None

# +--------------------------------------------------+
# |         PRZYGOTOWANIE DANYCH ROWEROWYCH          |
# |             Funkcje do zarzƒÖdzania               |
# +--------------------------------------------------+

"""
Klasa odpowiedzialna za predykcjƒô dostƒôpno≈õci rower√≥w na stacjach.
Wykorzystuje wytrenowane modele klasyfikacji (binarnej, wieloklasowej)
lub regresji do przewidywania statusu stacji rowerowych na podstawie
ich aktualnego stanu i warunk√≥w ≈õrodowiskowych.

Klasteryzowane cechy:
- Dane o stacji: 'bikes_available', 'docks_available', 'capacity',
    'manual_bikes_available', 'electric_bikes_available'.
    Cechy te opisujƒÖ bie≈ºƒÖcƒÖ dynamikƒô i pojemno≈õƒá stacji, co jest kluczowe
    dla oceny dostƒôpno≈õci rower√≥w.
- Dane pogodowe: 'temperature', 'wind_kph', 'precip_mm', 'humidity',
    'weather_condition'.
    Warunki pogodowe silnie korelujƒÖ z popytem na rowery miejskie i ich
    dostƒôpno≈õciƒÖ na stacjach.
- Dane o jako≈õci powietrza: 'fine_particles_pm2_5', 'coarse_particles_pm10'.
    Jako≈õƒá powietrza mo≈ºe wp≈Çywaƒá na decyzje u≈ºytkownik√≥w o korzystaniu z rower√≥w,
    a tym samym na dostƒôpno≈õƒá na stacjach.
- 'cluster_id': Identyfikator klastra, do kt√≥rego nale≈ºy dana stacja,
    pochodzƒÖcy z wcze≈õniej przeprowadzonej klasteryzacji. Dostarcza modelowi
    dodatkowy kontekst o typowych wzorcach zachowa≈Ñ dla tej grupy stacji.

Celem jest przewidywanie dostƒôpno≈õci rower√≥w na stacjach (binarnie:
wystarczajƒÖca/niska; wieloklasowo: brak/niska/umiarkowana/wysoka dostƒôpno≈õƒá;
regresja: przewidywana liczba dostƒôpnych rower√≥w) w oparciu o stan stacji
i czynniki zewnƒôtrzne.
"""

class BikeModelPredictor(BasePredictor):
    
    def __init__(self, model_type: str, model_name: str):
        super().__init__(model_type, 'bike', model_name)
        # Mapowanie cech dla danych stacji rowerowych
        self.feature_mapping = {
            'bikes_available': 'bikes_available',
            'docks_available': 'docks_available', 
            'capacity': 'capacity',
            'manual_bikes_available': 'manual_bikes_available',
            'electric_bikes_available': 'electric_bikes_available',
            'temperature': 'temperature',
            'wind_kph': 'wind_kph',
            'precip_mm': 'precip_mm',
            'humidity': 'humidity',
            'weather_condition': 'weather_condition',
            'fine_particles_pm2_5': 'fine_particles_pm2_5',
            'coarse_particles_pm10': 'coarse_particles_pm10',
            'cluster_id': 'cluster_id'
        }

    # Wykonuje predykcjƒô na podstawie s≈Çownika danych wej≈õciowych.
    # Zwraca przewidywanƒÖ warto≈õƒá/klasƒô lub (klasƒô numerycznƒÖ, prawdopodobie≈Ñstwa, klasƒô tekstowƒÖ) dla klasyfikacji.
    def predict(self, data_dict: Dict) -> Optional[Union[float, Tuple[int, List[float], str]]]:

        if not self.is_loaded:
            print(f"‚ö†Ô∏è Model '{self.raw_model_name}' nie jest za≈Çadowany. Nie mo≈ºna wykonaƒá predykcji.")
            return None
        
        # Przygotuj cechy
        features_df = self._prepare_features(data_dict, self.feature_mapping)
        
        if features_df is None:
            print(f"‚ö†Ô∏è Nie mo≈ºna przygotowaƒá cech dla modelu '{self.raw_model_name}'.")
            return None
        
        try:
            # Normalizacja danych
            data_scaled = self.scaler.transform(features_df)
            
            # Predykcja
            if self.model_type == 'binary':
                prediction_num = self.model.predict(data_scaled)[0]
                probabilities = self.model.predict_proba(data_scaled)[0].tolist()
                prediction_label = BIKE_BINARY_MAPPING.get(prediction_num, "nieznany_status_rower")
                return int(prediction_num), probabilities, prediction_label
            elif self.model_type == 'multiclass':
                prediction_num = self.model.predict(data_scaled)[0]
                probabilities = self.model.predict_proba(data_scaled)[0].tolist()
                prediction_label = BIKE_MULTICLASS_MAPPING.get(prediction_num, "nieznana_kategoria_rower")
                return int(prediction_num), probabilities, prediction_label
            elif self.model_type == 'regression':
                prediction = self.model.predict(data_scaled)[0]
                return float(prediction)
            else:
                print(f"‚ùå Nieznany typ modelu: {self.model_type}")
                return None
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd predykcji dla modelu '{self.raw_model_name}': {e}")
            return None

# +--------------------------------------------------+
# |          GLOBALNE USTAWIENIA I FUNKCJE           |
# |             Funkcje do zarzƒÖdzania               |
# +--------------------------------------------------+

# Globalne instancje predyktor√≥w dla ≈Çatwego dostƒôpu
# BƒôdƒÖ ≈Çadowane przy pierwszym imporcie tego pliku
bus_binary_predictor = BusModelPredictor('binary', 'bus_binary_model.pkl')
bus_multiclass_predictor = BusModelPredictor('multiclass', 'bus_multiclass_model.pkl')
bus_regression_predictor = BusModelPredictor('regression', 'bus_regression_model.pkl')

bike_binary_predictor = BikeModelPredictor('binary', 'bike_binary_model.pkl')
bike_multiclass_predictor = BikeModelPredictor('multiclass', 'bike_multiclass_model.pkl')
bike_regression_predictor = BikeModelPredictor('regression', 'bike_regression_model.pkl')

# Prze≈Çadowuje wszystkie globalne instancje predyktor√≥w.
def reload_all_predictors() -> Dict:
    print("üîÑ Prze≈Çadowywanie wszystkich predyktor√≥w...")
    results = {}
    
    for predictor in [
        bus_binary_predictor, bus_multiclass_predictor, bus_regression_predictor,
        bike_binary_predictor, bike_multiclass_predictor, bike_regression_predictor
    ]:
        if predictor:
            reloaded = predictor.reload_model()
            results[predictor.model_name] = "Prze≈Çadowano pomy≈õlnie" if reloaded else "B≈ÇƒÖd prze≈Çadowywania"
    
    print("‚úÖ Prze≈Çadowywanie wszystkich predyktor√≥w zako≈Ñczone.")
    return results

# Zwraca status za≈Çadowania dla wszystkich globalnych predyktor√≥w.
def get_all_predictors_status() -> Dict:

    status = {}
    for predictor in [
        bus_binary_predictor, bus_multiclass_predictor, bus_regression_predictor,
        bike_binary_predictor, bike_multiclass_predictor, bike_regression_predictor
    ]:
        if predictor:
            status[predictor.model_name] = predictor.get_status()
    return status
